<!DOCTYPE html>
<meta charset="utf-8">

<link href="css/nv.d3.css" rel="stylesheet" type="text/css">

<style>

body {
  overflow-y:scroll;
  margin: 0;
  padding: 0;
}

svg {
  overflow: hidden;
}

div {
  border: 0;
  margin: 0;
}

/*
#offsetDiv {
  margin-left: 100px;
  margin-top: 100px;
}
*/


#test1 {
  margin: 0;
}

#test1 svg {
  height: 500px;
}

</style>

<body>

<div id="offsetDiv">
  <div id="test1" class='with-3d-shadow with-transitions'>
    <svg></svg>
  </div>
</div>

<script src="js/nvd3/d3.v3.js"></script>
<!--<script src="../lib/fisheye.js"></script>-->
<script src="js/nvd3/nv.d3.js"></script>
<script src="js/nvd3/tooltip.js"></script>
<script src="js/nvd3/utils.js"></script>
<script src="js/nvd3/legend.js"></script>
<script src="js/nvd3/axis.js"></script>
<script src="js/nvd3/distribution.js"></script>
<script src="js/nvd3/scatter.js"></script>
<script src="js/nvd3/scatterChart.js"></script>
<script>



//Format A


var chart;
nv.addGraph(function() {
  chart = nv.models.scatterChart()
                .showDistX(true)
                .showDistY(true)
                .useVoronoi(true)
                .color(d3.scale.category10().range())
                .transitionDuration(300)
                ;

  chart.xAxis.tickFormat(d3.format('.02f'));
  chart.yAxis.tickFormat(d3.format('.02f'));
  chart.tooltipContent(function(key) {
      return '<h2>' + key + '</h2>';
  });

  d3.select('#test1 svg')
      .datum(randomData(4,40))
      //.datum(data)
      .call(chart);

  nv.utils.windowResize(chart.update);

  chart.dispatch.on('stateChange', function(e) { ('New State:', JSON.stringify(e)); });

  return chart;
});


function randomData(groups, points) { //# groups,# points per group
  var data = [],
      shapes = ['circle', 'cross', 'triangle-up', 'triangle-down', 'diamond', 'square'],
      random = d3.random.normal();

  for (i = 0; i < groups; i++) {
    data.push({
      key: 'Group ' + i,
      values: []
    });

    for (j = 0; j < points; j++) {
      data[i].values.push({
        x: random(),
        y: random(),
        size: Math.random()*15000,
        // shape: shapes[j % 6]
        shape: 'circle'
      });
    }
  }
  /*var data1 = [
	{
		key: 'Group1',
		values:[[x:3.4,y:5.6,size:150000,shape:'circle'],[x:8.9,y:6,size:10000,shape:'circle']]
	}
   ];

  data = eval(data1);*/

  return data;
}



</script>
